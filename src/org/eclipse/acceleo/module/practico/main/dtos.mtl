[comment encoding = UTF-8 /]
[module dtos('http://www.example.org/diagramaClasesCompleto')]

[template public generarDTOs(raiz : DiagramaClases)]

[for (paquete : Package | raiz.packages_contenidos)]	
[for (clase : Clase | paquete.clasificadores_contenidos->filter(Clase))]
[file ('src/main/java/'+raiz.artefacto_contenido.grupoId.substituteAll('.', '/')+'/'+raiz.artefacto_contenido.artefactotId+'/service/dto/'+clase.nombre+'DTO.java', false, 'UTF-8')]
package [raiz.artefacto_contenido.grupoId/].[raiz.artefacto_contenido.artefactotId/].service.dto;

import [raiz.artefacto_contenido.grupoId/].[raiz.artefacto_contenido.artefactotId/].domain.[clase.nombre/];

import java.io.Serializable;
import java.util.Set;
import java.util.HashSet;


public class [clase.nombre/]DTO implements Serializable {

    private Long id;

[for (a : Atributo | clase.atributos_contenidos)]
    private [a.tipo/] [a.nombre/];

[/for]

[for (r : Relacion | clase.relaciones_contenidas)]
[if r.multiplicidad = Multiplicidad::oneToOne or r.multiplicidad = Multiplicidad::manyToOne]
    private [r.destino.nombre/]DTO [r.destino.nombre.toLowerCase()/];

[/if]
[if r.multiplicidad = Multiplicidad::oneToMany or r.multiplicidad = Multiplicidad::manyToMany]
    private Set<[r.destino.nombre/]DTO> [r.destino.nombre.toLowerCase()/]s = new HashSet<>();

[/if]
[/for]

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

[for (a : Atributo | clase.atributos_contenidos)]
    public [a.tipo/] get[a.nombre.toUpperFirst()/]() {
        return [a.nombre/];
    }

    public void set[a.nombre.toUpperFirst()/]([a.tipo/] [a.nombre/]) {
        this.[a.nombre/] = [a.nombre/];
    }

[/for]
[for (r : Relacion | clase.relaciones_contenidas)]
[if r.multiplicidad = Multiplicidad::oneToOne or r.multiplicidad = Multiplicidad::manyToOne]
    public [r.destino.nombre/]DTO get[r.destino.nombre/]() {
        return [r.destino.nombre.toLowerCase()/];
    }

    public void set[r.destino.nombre/]([r.destino.nombre/]DTO [r.destino.nombre.toLowerCase()/]) {
        this.[r.destino.nombre.toLowerCase()/] = [r.destino.nombre.toLowerCase()/];
    }
[/if]
[if r.multiplicidad = Multiplicidad::oneToMany or r.multiplicidad = Multiplicidad::oneToMany]
    public Set<[r.destino.nombre/]DTO> get[r.destino.nombre/]s() {
        return [r.destino.nombre.toLowerCase()/]s;
    }

    public void set[r.destino.nombre/]s(Set<[r.destino.nombre/]DTO> [r.destino.nombre.toLowerCase()/]s) {
        this.[r.destino.nombre.toLowerCase()/]s = [r.destino.nombre.toLowerCase()/]s;
    }

[/if]
[/for]
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof [clase.nombre/])) {
            return false;
        }
        return id != null && id.equals((([clase.nombre/]) o).getId());
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public String toString() {
        return "[clase.nombre/]{" +
            "id=" + getId() +
[for (a : Atributo | clase.atributos_contenidos)]
            ", [a.nombre/]='" + get[a.nombre.toUpperFirst()/]() + "'" +
[/for]
            "}";
    }
}

[/file]
[/for]
[/for]
[/template]